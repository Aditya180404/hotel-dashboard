# -*- coding: utf-8 -*-
"""dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13IBXOE-a5xIaREquJkNYNUAWisUANzwK
"""

# hotel_dashboard.py
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import gc

# Memory optimization configuration
@st.cache_data(max_entries=3, ttl=3600, show_spinner=False)
def load_data(uploaded_file):
    # Optimized dtype specification
    dtype = {
        'property_id': 'category',
        'room_category': 'category',
        'booking_platform': 'category',
        'booking_status': 'category',
        'booking_id': 'string'
    }

    # Date columns parsing
    date_cols = ['booking_date', 'check_in_date', 'checkout_date']

    try:
        # Chunked reading for large files
        chunksize = 100000
        chunks = []
        for chunk in pd.read_csv(uploaded_file,
                                parse_dates=date_cols,
                                dtype=dtype,
                                chunksize=chunksize,
                                infer_datetime_format=True):
            # Feature engineering within each chunk
            chunk['stay_duration'] = (chunk['checkout_date'] - chunk['check_in_date']).dt.days.clip(lower=1)
            chunk['lead_time'] = (chunk['check_in_date'] - chunk['booking_date']).dt.days
            chunk['month'] = chunk['check_in_date'].dt.month_name()
            chunk['year'] = chunk['check_in_date'].dt.year
            chunk['year_month'] = chunk['check_in_date'].dt.to_period('M').astype(str)
            chunk['day_of_week'] = chunk['check_in_date'].dt.day_name()
            chunk['is_cancelled'] = chunk['booking_status'].apply(lambda x: 1 if str(x).lower() in ['cancelled', 'no show'] else 0)
            chunk['revenue_loss'] = chunk['revenue_generated'] - chunk['revenue_realized']

            # Calculate cancellation reason
            conditions = [
                (chunk['lead_time'] > 30) & (chunk['revenue_loss'] > 0),
                (chunk['lead_time'] <= 7) & (chunk['revenue_loss'] > 0),
                (chunk['lead_time'] <= 3) & (chunk['revenue_loss'] > 0),
                (chunk['revenue_loss'] == 0)
            ]
            choices = ['Long Lead Time', 'Short Notice', 'Last Minute', 'No Cancellation']
            chunk['cancellation_reason'] = np.select(conditions, choices, default='Other')

            # Key metrics
            chunk['adr'] = chunk['revenue_realized'] / chunk['stay_duration']
            chunk['revpar'] = chunk['revenue_realized'] / chunk['stay_duration']

            # Seasonality feature
            season_mapping = {
                12: 'Winter', 1: 'Winter', 2: 'Winter',
                3: 'Spring', 4: 'Spring', 5: 'Spring',
                6: 'Summer', 7: 'Summer', 8: 'Summer',
                9: 'Fall', 10: 'Fall', 11: 'Fall'
            }
            chunk['season'] = chunk['check_in_date'].dt.month.map(season_mapping)

            chunks.append(chunk)

        # Concatenate all chunks
        df = pd.concat(chunks, ignore_index=True)

        # Optimize numeric columns
        num_cols = df.select_dtypes(include=['int64', 'float64']).columns
        df[num_cols] = df[num_cols].apply(pd.to_numeric, downcast='unsigned')

        return df

    except Exception as e:
        st.error(f"Data loading error: {str(e)}")
        st.stop()

# Initialize garbage collection
gc.enable()

# --- CONFIGURATION ---
st.set_page_config(
    layout="wide",
    page_title="üè® Hotel Intelligence Dashboard",
    page_icon="üìä",
    initial_sidebar_state="expanded"
)

# Custom CSS for enhanced styling and animations with dark mode support
st.markdown("""
<style>
    /* Main styling */
    [data-testid="stAppViewContainer"] {
        background-color: var(--background-color);
        color: var(--text-color);
        transition: all 0.3s ease;
    }

    /* Define CSS variables for light/dark mode */
    :root {
        --background-color: #f8f9fa;
        --text-color: #333333;
        --card-bg: white;
        --card-border: #dee2e6;
        --header-bg: linear-gradient(135deg, #1a2a6c, #b21f1f, #1a2a6c);
        --kpi-value-color: #1a2a6c;
        --kpi-label-color: #6c757d;
        --tab-bg: white;
        --tab-active-bg: linear-gradient(135deg, #1a2a6c, #b21f1f);
        --insight-box-bg: #f0f8ff;
        --graph-card-bg: white;
    }

    @media (prefers-color-scheme: dark) {
        :root {
            --background-color: #0e1117;
            --text-color: #f0f2f6;
            --card-bg: #262730;
            --card-border: #444;
            --header-bg: linear-gradient(135deg, #0d1b2a, #1b263b, #0d1b2a);
            --kpi-value-color: #f0f2f6;
            --kpi-label-color: #adb5bd;
            --tab-bg: #262730;
            --tab-active-bg: linear-gradient(135deg, #0d1b2a, #1b263b);
            --insight-box-bg: #1a2a6c;
            --graph-card-bg: #262730;
        }

        /* Plotly chart adjustments for dark mode */
        .js-plotly-plot .plotly, .js-plotly-plot .plotly div {
            background-color: transparent !important;
        }

        /* Streamlit component adjustments */
        .stSelectbox, .stMultiSelect, .stDateInput, .stRadio, .stCheckbox {
            background-color: var(--card-bg);
            color: var(--text-color);
        }

        .stTextInput>div>div>input, .stNumberInput>div>div>input {
            background-color: var(--card-bg);
            color: var(--text-color);
        }
    }

    /* Header styling */
    .header {
        background: var(--header-bg);
        color: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin-bottom: 25px;
        animation: fadeIn 1s ease-in-out;
    }

    /* KPI styling */
    .kpi-card {
        background: var(--card-bg);
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.05);
        text-align: center;
        transition: all 0.3s ease;
        border-left: 4px solid #1a2a6c;
        animation: slideIn 0.5s ease-out;
        min-height: 120px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        color: var(--text-color);
    }
    .kpi-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        border-left: 4px solid #b21f1f;
    }
    .kpi-value {
        font-size: 28px;
        font-weight: 700;
        color: var(--kpi-value-color);
        animation: pulse 2s infinite;
        margin-bottom: 5px;
    }
    .kpi-label {
        font-size: 14px;
        color: var(--kpi-label-color);
    }

    /* Tab styling */
    .stTabs [data-baseweb="tab-list"] {
        gap: 10px;
    }
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        padding: 0 20px;
        background: var(--tab-bg);
        border-radius: 10px 10px 0 0;
        border: 1px solid var(--card-border) !important;
        font-weight: 600;
        transition: all 0.3s ease;
        animation: fadeIn 0.5s ease-out;
        color: var(--text-color);
    }
    .stTabs [aria-selected="true"] {
        background: var(--tab-active-bg) !important;
        color: white !important;
        box-shadow: 0 4px 8px rgba(26, 42, 108, 0.2);
    }

    /* Button styling */
    .stButton>button {
        background: linear-gradient(135deg, #1a2a6c, #b21f1f);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 10px 20px;
        font-weight: 600;
        transition: all 0.3s ease;
    }
    .stButton>button:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    /* Graph card styling */
    .graph-card {
        background: var(--graph-card-bg);
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.05);
        margin-bottom: 20px;
        transition: all 0.3s ease;
        animation: fadeIn 0.7s ease-out;
        color: var(--text-color);
    }
    .graph-card:hover {
        box-shadow: 0 8px 15px rgba(0,0,0,0.1);
    }

    /* Insight box styling */
    .insight-box {
        background: var(--insight-box-bg);
        border-radius: 10px;
        padding: 15px;
        border-left: 4px solid #1a2a6c;
        margin-top: 10px;
        animation: slideIn 0.5s ease-out;
        color: var(--text-color);
    }

    /* Table styling */
    table {
        color: var(--text-color) !important;
    }

    /* Animations */
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    @keyframes slideIn {
        from { transform: translateY(20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }

    /* Tooltip styling */
    .hover-tooltip {
        position: relative;
        display: inline-block;
        border-bottom: 1px dotted var(--text-color);
    }
    .hover-tooltip .tooltip-text {
        visibility: hidden;
        width: 200px;
        background-color: #1a2a6c;
        color: #fff;
        text-align: center;
        border-radius: 6px;
        padding: 5px;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        margin-left: -100px;
        opacity: 0;
        transition: opacity 0.3s;
    }
    .hover-tooltip:hover .tooltip-text {
        visibility: visible;
        opacity: 1;
    }

    /* Clear cache button */
    .clear-cache-btn {
        background: linear-gradient(135deg, #dc3545, #b21f1f) !important;
    }
</style>
""", unsafe_allow_html=True)

# --- HEADER SECTION ---
st.markdown("""
<div class="header">
    <h1 style="color:white;">üè® Hotel Intelligence Dashboard</h1>
    <p style="color:white;">Advanced analytics platform for hospitality performance optimization and revenue management</p>
</div>
""", unsafe_allow_html=True)

# --- SIDEBAR ---
with st.sidebar:
    st.header("üîß Dashboard Controls")

    # Clear cache button
    if st.button("üîÑ Clear Cache", key="clear_cache", help="Clear cached data to reload fresh data",
                use_container_width=True, type="primary"):
        st.cache_data.clear()
        st.success("Cache cleared successfully!")

    uploaded_file = st.file_uploader("üì§ Upload Booking Data", type=["csv"],
                                   help="Upload your hotel booking data in CSV format")

    if uploaded_file is None:
        st.warning("Please upload a CSV file to proceed")
        st.stop()

    try:
        with st.spinner("Loading and processing data..."):
            df = load_data(uploaded_file)
            st.success("Data loaded successfully!")
    except Exception as e:
        st.error(f"Failed to process the uploaded file: {str(e)}")
        st.stop()

    # Filters
    st.subheader("üîç Filter Data")
    property_ids = st.multiselect("Property ID", options=df['property_id'].unique(),
                                default=df['property_id'].unique())
    room_categories = st.multiselect("Room Category", options=df['room_category'].unique(),
                                   default=df['room_category'].unique())
    booking_platforms = st.multiselect("Booking Platform", options=df['booking_platform'].unique(),
                                     default=df['booking_platform'].unique())
    booking_statuses = st.multiselect("Booking Status", options=df['booking_status'].unique(),
                                    default=df['booking_status'].unique())

    # Date range filter
    min_date = df['check_in_date'].min().to_pydatetime()
    max_date = df['check_in_date'].max().to_pydatetime()
    date_range = st.date_input("Date Range", [min_date, max_date],
                              min_value=min_date, max_value=max_date)

    # Interactive elements
    st.subheader("üéöÔ∏è Interactive Controls")
    show_insights = st.checkbox("üìå Show Insights Boxes", value=True)

# Apply filters
try:
    df_filtered = df[
        (df['property_id'].isin(property_ids)) &
        (df['room_category'].isin(room_categories)) &
        (df['booking_platform'].isin(booking_platforms)) &
        (df['booking_status'].isin(booking_statuses)) &
        (df['check_in_date'] >= pd.to_datetime(date_range[0])) &
        (df['check_in_date'] <= pd.to_datetime(date_range[1]))
    ].copy()
except Exception as e:
    st.error(f"Error applying filters: {str(e)}")
    st.stop()

# --- KPI SECTION ---
st.subheader("üìä Key Performance Indicators")

# Calculate KPIs with error handling
try:
    total_revenue = df_filtered['revenue_realized'].sum()
    cancellation_rate = df_filtered['is_cancelled'].mean() * 100
    avg_occupancy = df_filtered.groupby('check_in_date')['property_id'].count().mean()
    avg_adr = df_filtered['adr'].mean()
    revenue_loss = df_filtered['revenue_loss'].sum()
    revpar = df_filtered['revpar'].mean()
except Exception as e:
    st.error(f"Error calculating KPIs: {str(e)}")
    st.stop()

# Create KPI columns with improved spacing
kpi1, kpi2, kpi3, kpi4, kpi5, kpi6 = st.columns(6)

kpi1.markdown(f"""
<div class="kpi-card" style="animation-delay: 0.1s">
    <div class="kpi-value">‚Çπ{total_revenue:,.0f}</div>
    <div class="kpi-label">Total Revenue</div>
</div>""", unsafe_allow_html=True)

kpi2.markdown(f"""
<div class="kpi-card" style="animation-delay: 0.2s">
    <div class="kpi-value">{cancellation_rate:.1f}%</div>
    <div class="kpi-label">Cancellation Rate</div>
</div>""", unsafe_allow_html=True)

kpi3.markdown(f"""
<div class="kpi-card" style="animation-delay: 0.3s">
    <div class="kpi-value">{avg_occupancy:.1f}</div>
    <div class="kpi-label">Avg Occupancy</div>
</div>""", unsafe_allow_html=True)

kpi4.markdown(f"""
<div class="kpi-card" style="animation-delay: 0.4s">
    <div class="kpi-value">‚Çπ{avg_adr:,.0f}</div>
    <div class="kpi-label">Avg Daily Rate</div>
</div>""", unsafe_allow_html=True)

kpi5.markdown(f"""
<div class="kpi-card" style="animation-delay: 0.5s">
    <div class="kpi-value">‚Çπ{revenue_loss:,.0f}</div>
    <div class="kpi-label">Revenue Loss</div>
</div>""", unsafe_allow_html=True)

kpi6.markdown(f"""
<div class="kpi-card" style="animation-delay: 0.6s">
    <div class="kpi-value">‚Çπ{revpar:,.0f}</div>
    <div class="kpi-label">RevPAR</div>
</div>""", unsafe_allow_html=True)

# --- MAIN DASHBOARD TABS ---
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "üìà Revenue Analysis",
    "‚ùå Cancellations",
    "üë• Guest Insights",
    "üìÖ Seasonality",
    "üõéÔ∏è Ancillary Services",
    "üí° Recommendations"
])

with tab1:
    st.subheader("Revenue Performance Analysis")

    # Revenue trends
    with st.container():
        st.markdown("### Revenue Trends Over Time")

        try:
            revenue_trend = df_filtered.groupby('year_month')['revenue_realized'].sum().reset_index()

            fig = px.line(revenue_trend, x='year_month', y='revenue_realized',
                          markers=True, line_shape='spline',
                          labels={'revenue_realized': 'Revenue (‚Çπ)', 'year_month': 'Month'},
                          template='plotly_white',
                          color_discrete_sequence=['#1a2a6c'])

            # Add annotations for peaks
            max_revenue = revenue_trend['revenue_realized'].max()
            max_month = revenue_trend.loc[revenue_trend['revenue_realized'].idxmax(), 'year_month']
            fig.add_annotation(x=max_month, y=max_revenue,
                              text="Peak Revenue",
                              showarrow=True,
                              arrowhead=1)

            st.plotly_chart(fig, use_container_width=True)

            if show_insights:
                with st.expander("üìå Insights & Recommendations"):
                    st.markdown(f"""
                    <div class="insight-box">
                        <h4>Revenue Trend Analysis</h4>
                        <ul>
                            <li>The revenue peaked in <b>{max_month}</b> at ‚Çπ{max_revenue:,.0f}</li>
                            <li>Identify the factors contributing to this peak (seasonality, events, promotions)</li>
                            <li>Consider replicating successful strategies from peak periods in other months</li>
                            <li>Implement dynamic pricing during high-demand periods to maximize revenue</li>
                        </ul>
                    </div>
                    """, unsafe_allow_html=True)
        except Exception as e:
            st.error(f"Error generating revenue trends: {str(e)}")

    # Platform performance
    with st.container():
        st.markdown("### Booking Platform Performance Comparison")

        try:
            platform_perf = df_filtered.groupby('booking_platform').agg(
                total_revenue=('revenue_realized', 'sum'),
                avg_adr=('adr', 'mean'),
                cancellation_rate=('is_cancelled', 'mean'),
                booking_count=('booking_id', 'count')
            ).reset_index()

            # Create interactive selector for metric
            metric = st.radio("Select Metric to View:",
                             ["Total Revenue", "Average ADR", "Cancellation Rate"],
                             horizontal=True, key="platform_metric")

            if metric == "Total Revenue":
                y_metric = 'total_revenue'
                title = "Total Revenue by Platform"
                color_scale = 'Blues'
            elif metric == "Average ADR":
                y_metric = 'avg_adr'
                title = "Average Daily Rate by Platform"
                color_scale = 'Greens'
            else:
                y_metric = 'cancellation_rate'
                title = "Cancellation Rate by Platform"
                color_scale = 'Reds'

            fig = px.bar(platform_perf, x='booking_platform', y=y_metric,
                         color=y_metric, color_continuous_scale=color_scale,
                         title=title,
                         labels={y_metric: metric, 'booking_platform': 'Booking Platform'},
                         template='plotly_white')

            fig.update_layout(hovermode="x", clickmode='event+select')
            st.plotly_chart(fig, use_container_width=True)

            if show_insights:
                with st.expander("üìå Platform Performance Insights"):
                    platform_cancellations = df_filtered.groupby('booking_platform')['is_cancelled'].mean().reset_index()
                    st.markdown(f"""
                    <div class="insight-box">
                        <h4>Platform Performance Analysis</h4>
                        <ul>
                            <li><b>Top Revenue Generator:</b> {platform_perf.loc[platform_perf['total_revenue'].idxmax(), 'booking_platform']}</li>
                            <li><b>Highest ADR:</b> {platform_perf.loc[platform_perf['avg_adr'].idxmax(), 'booking_platform']}</li>
                            <li><b>Lowest Cancellation Rate:</b> {platform_cancellations.loc[platform_cancellations['is_cancelled'].idxmin(), 'booking_platform']}</li>
                            <li>Consider allocating more marketing budget to high-performing platforms</li>
                            <li>Negotiate better commission rates with platforms showing high cancellation rates</li>
                        </ul>
                    </div>
                    """, unsafe_allow_html=True)
        except Exception as e:
            st.error(f"Error generating platform performance charts: {str(e)}")

    # Room category performance
    with st.container():
        st.markdown("### Room Category Performance")

        try:
            room_perf = df_filtered.groupby(['room_category', 'booking_platform']).agg(
                revenue=('revenue_realized', 'sum'),
                bookings=('booking_id', 'count')
            ).reset_index()

            # Create interactive treemap
            fig = px.treemap(room_perf,
                            path=['room_category', 'booking_platform'],
                            values='revenue',
                            color='bookings',
                            color_continuous_scale='RdBu',
                            title="Revenue Distribution by Room Category and Booking Platform",
                            template='plotly_white')

            fig.update_layout(margin=dict(t=50, l=25, r=25, b=25))
            st.plotly_chart(fig, use_container_width=True)

            if show_insights:
                with st.expander("üìå Room Category Insights"):
                    st.markdown("""
                    <div class="insight-box">
                        <h4>Room Category Analysis</h4>
                        <ul>
                            <li>Identify which room categories generate the most revenue</li>
                            <li>Analyze which platforms are most effective for each room type</li>
                            <li>Consider adjusting inventory allocation based on performance</li>
                            <li>Develop targeted promotions for underperforming room categories</li>
                        </ul>
                    </div>
                    """, unsafe_allow_html=True)
        except Exception as e:
            st.error(f"Error generating room category performance charts: {str(e)}")

with tab2:
    st.subheader("Cancellation Analysis")

    col1, col2 = st.columns([5, 5])

    with col1:
        # Cancellation trends
        with st.container():
            st.markdown("### Cancellation Trends Over Time")

            try:
                cancellation_trend = df_filtered.groupby('year_month')['is_cancelled'].mean().reset_index()

                fig = px.line(cancellation_trend, x='year_month', y='is_cancelled',
                              labels={'is_cancelled': 'Cancellation Rate', 'year_month': 'Month'},
                              markers=True, line_shape='spline',
                              color_discrete_sequence=['#b21f1f'])

                # Add peak annotation
                fig.add_annotation(
                    x=cancellation_trend.loc[cancellation_trend['is_cancelled'].idxmax(), 'year_month'],
                    y=cancellation_trend['is_cancelled'].max(),
                    text="Peak Cancellations",
                    showarrow=True,
                    arrowhead=1
                )

                st.plotly_chart(fig, use_container_width=True)

                if show_insights:
                    with st.expander("üìå Cancellation Trend Insights"):
                        st.markdown(f"""
                        <div class="insight-box">
                            <h4>Cancellation Pattern Analysis</h4>
                            <ul>
                                <li>Cancellation rate peaked at <b>{cancellation_trend['is_cancelled'].max():.1%}</b> in <b>{cancellation_trend.loc[cancellation_trend['is_cancelled'].idxmax(), 'year_month']}</b></li>
                                <li>Analyze external factors during peak cancellation periods (weather, events, etc.)</li>
                                <li>Consider implementing stricter cancellation policies during high-risk periods</li>
                                <li>Offer non-refundable rate options with discounts to reduce cancellations</li>
                            </ul>
                        </div>
                        """, unsafe_allow_html=True)
            except Exception as e:
                st.error(f"Error generating cancellation trends: {str(e)}")

        # Cancellation reasons
        with st.container():
            st.markdown("### Cancellation Reasons")

            try:
                cancellation_reasons = df_filtered[df_filtered['is_cancelled'] == 1]['cancellation_reason'].value_counts().reset_index()

                fig = px.pie(cancellation_reasons, values='count', names='cancellation_reason',
                             hole=0.3, template='plotly_white',
                             color_discrete_sequence=px.colors.sequential.Reds)

                fig.update_traces(
                    textposition='inside',
                    textinfo='percent+label',
                    pull=[0.1 if i == cancellation_reasons['count'].idxmax() else 0 for i in range(len(cancellation_reasons))]
                )

                st.plotly_chart(fig, use_container_width=True)

                if show_insights:
                    with st.expander("üìå Cancellation Reason Insights"):
                        st.markdown(f"""
                        <div class="insight-box">
                            <h4>Cancellation Reason Analysis</h4>
                            <ul>
                                <li><b>Primary Reason:</b> {cancellation_reasons.loc[0, 'cancellation_reason']} accounts for {cancellation_reasons.loc[0, 'count']/cancellation_reasons['count'].sum():.1%} of cancellations</li>
                                <li>Develop targeted strategies for each cancellation reason type</li>
                                <li>Implement flexible policies for long lead time cancellations</li>
                                <li>Create last-minute booking options for short notice cancellations</li>
                            </ul>
                        </div>
                        """, unsafe_allow_html=True)
            except Exception as e:
                st.error(f"Error generating cancellation reasons chart: {str(e)}")

    with col2:
        # Cancellation impact by platform
        with st.container():
            st.markdown("### Cancellation Impact by Platform")

            try:
                platform_cancellations = df_filtered.groupby('booking_platform').agg(
                    total_bookings=('booking_id', 'count'),
                    cancellations=('is_cancelled', 'sum')
                ).reset_index()
                platform_cancellations['cancellation_rate'] = platform_cancellations['cancellations'] / platform_cancellations['total_bookings']
                platform_cancellations['revenue_loss'] = df_filtered.groupby('booking_platform')['revenue_loss'].sum().values

                fig = px.scatter(platform_cancellations, x='cancellation_rate', y='revenue_loss',
                                 size='total_bookings', color='booking_platform',
                                 hover_name='booking_platform', log_y=True,
                                 labels={'cancellation_rate': 'Cancellation Rate',
                                         'revenue_loss': 'Revenue Loss (Log Scale)'},
                                 template='plotly_white')

                fig.update_layout(
                    hovermode="closest",
                    clickmode='event+select'
                )

                st.plotly_chart(fig, use_container_width=True)

                if show_insights:
                    with st.expander("üìå Platform Cancellation Insights"):
                        st.markdown("""
                        <div class="insight-box">
                            <h4>Platform Cancellation Analysis</h4>
                            <ul>
                                <li>Platforms in the top-right quadrant have both high cancellation rates and high revenue loss</li>
                                <li>Focus on improving policies for these high-risk platforms</li>
                                <li>Consider implementing deposit requirements or stricter cancellation policies</li>
                                <li>Analyze why certain platforms have better cancellation rates than others</li>
                            </ul>
                        </div>
                        """, unsafe_allow_html=True)
            except Exception as e:
                st.error(f"Error generating platform cancellation impact chart: {str(e)}")

        # Lead time vs cancellations
        with st.container():
            st.markdown("### Lead Time vs Cancellations")

            try:
                df_filtered['lead_time_group'] = pd.cut(df_filtered['lead_time'],
                                                       bins=[0, 3, 7, 14, 30, 60, 90, 180, 365],
                                                       labels=['0-3', '4-7', '8-14', '15-30', '31-60', '61-90', '91-180', '180+'])

                lead_time_cancellation = df_filtered.groupby('lead_time_group')['is_cancelled'].mean().reset_index()

                fig = px.bar(lead_time_cancellation, x='lead_time_group', y='is_cancelled',
                             labels={'is_cancelled': 'Cancellation Rate', 'lead_time_group': 'Lead Time (days)'},
                             color='is_cancelled', color_continuous_scale='Reds',
                             template='plotly_white')

                st.plotly_chart(fig, use_container_width=True)

                if show_insights:
                    with st.expander("üìå Lead Time Insights"):
                        st.markdown(f"""
                        <div class="insight-box">
                            <h4>Lead Time Analysis</h4>
                            <ul>
                                <li>Cancellation rate peaks at <b>{lead_time_cancellation.loc[lead_time_cancellation['is_cancelled'].idxmax(), 'lead_time_group']}</b> days lead time</li>
                                <li>Consider implementing different cancellation policies based on lead time</li>
                                <li>Offer incentives for early bookings with non-refundable deposits</li>
                                <li>Create flexible options for last-minute bookings</li>
                            </ul>
                        </div>
                        """, unsafe_allow_html=True)
            except Exception as e:
                st.error(f"Error generating lead time vs cancellations chart: {str(e)}")

with tab3:
    st.subheader("Guest Behavior Insights")

    col1, col2 = st.columns([5, 5])

    with col1:
        # Guest Segmentation
        with st.container():
            st.markdown("### Guest Segmentation Analysis")

            try:
                # Prepare data
                cluster_df = df_filtered[['lead_time', 'stay_duration', 'adr', 'no_guests']].dropna()
                scaler = StandardScaler()
                scaled_data = scaler.fit_transform(cluster_df)

                # K-means clustering
                kmeans = KMeans(n_clusters=4, random_state=42)
                clusters = kmeans.fit_predict(scaled_data)
                cluster_df['cluster'] = clusters

                # PCA for dimensionality reduction
                pca = PCA(n_components=2)
                pca_result = pca.fit_transform(scaled_data)
                cluster_df['pca1'] = pca_result[:, 0]
                cluster_df['pca2'] = pca_result[:, 1]

                # Create interactive 2D scatter plot
                fig = px.scatter(cluster_df,
                                 x='pca1',
                                 y='pca2',
                                 color='cluster',
                                 size='no_guests',
                                 hover_data=['lead_time', 'stay_duration', 'adr'],
                                 labels={
                                     'pca1': 'Principal Component 1',
                                     'pca2': 'Principal Component 2',
                                     'cluster': 'Segment'
                                 },
                                 title='Guest Segments Visualization',
                                 template='plotly_white')

                # Add centroids
                centroids = kmeans.cluster_centers_
                centroids_pca = pca.transform(centroids)

                for i, centroid in enumerate(centroids_pca):
                    fig.add_trace(go.Scatter(
                        x=[centroid[0]],
                        y=[centroid[1]],
                        mode='markers',
                        marker=dict(
                            color='black',
                            size=15,
                            symbol='x'
                        ),
                        name=f'Segment {i} Center',
                        showlegend=False
                    ))

                fig.update_layout(
                    legend_title_text='Guest Segments',
                    hovermode='closest'
                )

                st.plotly_chart(fig, use_container_width=True)

                if show_insights:
                    with st.expander("üìå Guest Segmentation Insights"):
                        # Calculate cluster characteristics
                        cluster_stats = cluster_df.groupby('cluster').agg({
                            'lead_time': 'mean',
                            'stay_duration': 'mean',
                            'adr': 'mean',
                            'no_guests': 'mean'
                        }).reset_index()

                        st.markdown("""
                        <div class="insight-box">
                            <h4>Segment Characteristics</h4>
                            <table style="width:100%; border-collapse: collapse; margin-bottom: 15px;">
                                <tr style="background-color: #f0f0f0;">
                                    <th style="padding: 8px; border: 1px solid #ddd;">Segment</th>
                                    <th style="padding: 8px; border: 1px solid #ddd;">Avg Lead Time</th>
                                    <th style="padding: 8px; border: 1px solid #ddd;">Avg Stay</th>
                                    <th style="padding: 8px; border: 1px solid #ddd;">Avg ADR</th>
                                    <th style="padding: 8px; border: 1px solid #ddd;">Avg Guests</th>
                                </tr>
                        """, unsafe_allow_html=True)

                        for _, row in cluster_stats.iterrows():
                            st.markdown(f"""
                                <tr>
                                    <td style="padding: 8px; border: 1px solid #ddd; text-align: center;">{int(row['cluster'])}</td>
                                    <td style="padding: 8px; border: 1px solid #ddd; text-align: center;">{row['lead_time']:.1f} days</td>
                                    <td style="padding: 8px; border: 1px solid #ddd; text-align: center;">{row['stay_duration']:.1f} nights</td>
                                    <td style="padding: 8px; border: 1px solid #ddd; text-align: center;">‚Çπ{row['adr']:,.0f}</td>
                                    <td style="padding: 8px; border: 1px solid #ddd; text-align: center;">{row['no_guests']:.1f}</td>
                                </tr>
                            """, unsafe_allow_html=True)

                        st.markdown("""
                            </table>
                            <ul>
                                <li><b>Segment 0:</b> Short lead time, brief stays - business travelers</li>
                                <li><b>Segment 1:</b> Long lead time, extended stays - vacation planners</li>
                                <li><b>Segment 2:</b> High ADR, small groups - premium guests</li>
                                <li><b>Segment 3:</b> Large groups, moderate ADR - family travelers</li>
                                <li><b>Action:</b> Create targeted packages for each segment</li>
                            </ul>
                        </div>
                        """, unsafe_allow_html=True)
            except Exception as e:
                st.error(f"Error generating guest segmentation: {str(e)}")

    with col2:
        # Guest ratings analysis
        with st.container():
            st.markdown("### Guest Ratings Analysis")

            try:
                if 'ratings_given' in df_filtered.columns:
                    ratings = df_filtered['ratings_given'].dropna()
                    if not ratings.empty:
                        fig = px.violin(df_filtered, y='ratings_given', box=True, points="all",
                                        labels={'ratings_given': 'Rating'},
                                        color_discrete_sequence=['#1a2a6c'],
                                        template='plotly_white')

                        st.plotly_chart(fig, use_container_width=True)

                        # Ratings by room category
                        st.markdown("#### Ratings by Room Category")
                        ratings_room = df_filtered.groupby('room_category')['ratings_given'].mean().reset_index()
                        fig = px.bar(ratings_room, x='room_category', y='ratings_given',
                                    labels={'ratings_given': 'Average Rating', 'room_category': 'Room Category'},
                                    color='room_category', template='plotly_white')

                        st.plotly_chart(fig, use_container_width=True)

                        if show_insights:
                            with st.expander("üìå Ratings Insights"):
                                st.markdown(f"""
                                <div class="insight-box">
                                    <h4>Guest Rating Analysis</h4>
                                    <ul>
                                        <li>Average rating: <b>{ratings.mean():.1f}/5</b></li>
                                        <li>Highest rated room category: <b>{ratings_room.loc[ratings_room['ratings_given'].idxmax(), 'room_category']}</b></li>
                                        <li>Analyze low-rated stays for service improvement opportunities</li>
                                        <li>Consider rewarding staff for high-rated stays</li>
                                    </ul>
                                </div>
                                """, unsafe_allow_html=True)
                    else:
                        st.warning("No ratings data available")
                else:
                    st.warning("Ratings data not available in the dataset")
            except Exception as e:
                st.error(f"Error generating ratings analysis: {str(e)}")

        # Stay duration analysis
        with st.container():
            st.markdown("### Stay Duration Analysis")

            try:
                stay_duration = df_filtered.groupby('stay_duration')['booking_id'].count().reset_index()

                fig = px.bar(stay_duration, x='stay_duration', y='booking_id',
                             labels={'booking_id': 'Number of Bookings', 'stay_duration': 'Nights Stayed'},
                             color='booking_id', color_continuous_scale='Blues',
                             template='plotly_white')

                st.plotly_chart(fig, use_container_width=True)

                if show_insights:
                    with st.expander("üìå Stay Duration Insights"):
                        st.markdown(f"""
                        <div class="insight-box">
                            <h4>Stay Duration Analysis</h4>
                            <ul>
                                <li>Most common stay duration is {stay_duration.loc[stay_duration['booking_id'].idxmax(), 'stay_duration']} nights</li>
                                <li>Consider creating packages tailored to popular stay lengths</li>
                                <li>Offer incentives for guests to extend their stay during off-peak periods</li>
                                <li>Develop targeted promotions based on typical stay durations</li>
                            </ul>
                        </div>
                        """, unsafe_allow_html=True)
            except Exception as e:
                st.error(f"Error generating stay duration analysis: {str(e)}")

with tab4:
    st.subheader("Seasonal Patterns")

    # Monthly performance
    with st.container():
        st.markdown("### Monthly Performance Trends")

        try:
            monthly_data = df_filtered.groupby(['year', 'month']).agg(
                revenue=('revenue_realized', 'sum'),
                cancellations=('is_cancelled', 'sum'),
                occupancy=('booking_id', 'count')
            ).reset_index()

            # Order months correctly
            month_order = ['January', 'February', 'March', 'April', 'May', 'June',
                          'July', 'August', 'September', 'October', 'November', 'December']
            monthly_data['month'] = pd.Categorical(monthly_data['month'], categories=month_order, ordered=True)
            monthly_data = monthly_data.sort_values(['year', 'month'])

            fig = px.line(monthly_data, x='month', y='revenue', color='year',
                          markers=True, template='plotly_white',
                          labels={'revenue': 'Revenue', 'month': 'Month'})

            st.plotly_chart(fig, use_container_width=True)

            if show_insights:
                with st.expander("üìå Monthly Performance Insights"):
                    st.markdown("""
                    <div class="insight-box">
                        <h4>Seasonal Revenue Patterns</h4>
                        <ul>
                            <li>Identify consistent high and low seasons across years</li>
                            <li>Plan marketing campaigns to boost occupancy during low seasons</li>
                            <li>Implement dynamic pricing strategies based on seasonal demand</li>
                            <li>Allocate staff resources according to seasonal occupancy patterns</li>
                        </ul>
                    </div>
                    """, unsafe_allow_html=True)
        except Exception as e:
            st.error(f"Error generating monthly performance trends: {str(e)}")

    # Weekly patterns
    with st.container():
        st.markdown("### Weekly Booking Patterns")

        try:
            weekday_data = df_filtered.groupby('day_of_week').agg(
                bookings=('booking_id', 'count'),
                revenue=('revenue_realized', 'sum'),
                cancellations=('is_cancelled', 'sum')
            ).reset_index()

            # Order days correctly
            day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
            weekday_data['day_of_week'] = pd.Categorical(weekday_data['day_of_week'], categories=day_order, ordered=True)
            weekday_data = weekday_data.sort_values('day_of_week')

            fig = px.bar(weekday_data, x='day_of_week', y=['bookings', 'revenue'],
                         barmode='group', template='plotly_white',
                         labels={'value': 'Count/Revenue', 'day_of_week': 'Day of Week'},
                         color_discrete_sequence=['#1a2a6c', '#b21f1f'])

            st.plotly_chart(fig, use_container_width=True)

            if show_insights:
                with st.expander("üìå Weekly Pattern Insights"):
                    st.markdown(f"""
                    <div class="insight-box">
                        <h4>Weekly Booking Trends</h4>
                        <ul>
                            <li>Peak booking days: {weekday_data.loc[weekday_data['bookings'].idxmax(), 'day_of_week']}</li>
                            <li>Lowest booking days: {weekday_data.loc[weekday_data['bookings'].idxmin(), 'day_of_week']}</li>
                            <li>Consider offering mid-week specials to boost occupancy</li>
                            <li>Plan staffing levels according to weekly demand patterns</li>
                            <li>Target weekend packages to leisure travelers</li>
                        </ul>
                    </div>
                    """, unsafe_allow_html=True)
        except Exception as e:
            st.error(f"Error generating weekly patterns: {str(e)}")

    # Seasonality heatmap
    with st.container():
        st.markdown("### Seasonality Heatmap by Room Category")

        try:
            pivot_data = df_filtered.groupby(['season', 'room_category'])['revenue_realized'].sum().reset_index()
            pivot_data = pivot_data.pivot(index='season', columns='room_category', values='revenue_realized').fillna(0)

            fig = px.imshow(pivot_data, text_auto=True, aspect="auto",
                            labels=dict(x="Room Category", y="Season", color="Revenue"),
                            color_continuous_scale='Blues', template='plotly_white')

            st.plotly_chart(fig, use_container_width=True)

            if show_insights:
                with st.expander("üìå Seasonality Insights"):
                    st.markdown("""
                    <div class="insight-box">
                        <h4>Seasonal Room Category Performance</h4>
                        <ul>
                            <li>Identify which room categories perform best in each season</li>
                            <li>Adjust pricing strategies based on seasonal demand for each room type</li>
                            <li>Create seasonal packages tailored to specific room categories</li>
                            <li>Plan renovations or upgrades during low seasons for specific room types</li>
                        </ul>
                    </div>
                    """, unsafe_allow_html=True)
        except Exception as e:
            st.error(f"Error generating seasonality heatmap: {str(e)}")

with tab5:
    st.subheader("Ancillary Services Analysis")

    # Sample data for ancillary services
    ancillary_data = pd.DataFrame({
        'Service': ['Restaurant', 'Spa', 'Parking', 'Laundry', 'Airport Transfer', 'Mini Bar'],
        'Global_Usage_Percentage': [45, 28, 60, 35, 22, 40],
        'India_Usage_Percentage': [55, 35, 45, 25, 30, 30],
        'Revenue_Per_Guest': [1200, 2500, 300, 500, 800, 750],
        'Profit_Margin': [35, 60, 80, 40, 25, 55]
    }).astype({
        'Global_Usage_Percentage': 'int8',
        'India_Usage_Percentage': 'int8',
        'Revenue_Per_Guest': 'int16',
        'Profit_Margin': 'int8'
    })

    col1, col2 = st.columns([5, 5])

    with col1:
        # Service Usage Radar Chart
        with st.container():
            st.markdown("### Service Usage: Global vs India")

            fig = go.Figure()
            fig.add_trace(go.Scatterpolar(
                r=ancillary_data['Global_Usage_Percentage'],
                theta=ancillary_data['Service'],
                fill='toself',
                name='Global Average',
                line_color='#1a2a6c'
            ))
            fig.add_trace(go.Scatterpolar(
                r=ancillary_data['India_Usage_Percentage'],
                theta=ancillary_data['Service'],
                fill='toself',
                name='India Market',
                line_color='#b21f1f'
            ))
            fig.update_layout(
                polar=dict(radialaxis=dict(visible=True, range=[0, 100])),
                showlegend=True,
                template='plotly_white',
                height=500
            )
            st.plotly_chart(fig, use_container_width=True)

            if show_insights:
                with st.expander("üìå Service Usage Insights"):
                    st.markdown("""
                    <div class="insight-box">
                        <h4>Ancillary Service Usage Patterns</h4>
                        <ul>
                            <li><b>Restaurant dominance:</b> 55% usage in India vs 45% globally suggests strong F&B culture</li>
                            <li><b>Spa potential:</b> 25% higher adoption in India (35% vs 28%) indicates wellness focus</li>
                            <li><b>Parking gap:</b> 15% lower usage in India (45% vs 60%) likely due to different transportation patterns</li>
                            <li><b>Action:</b> Bundle spa with room bookings during high-occupancy periods</li>
                            <li><b>Opportunity:</b> Develop compact parking solutions for urban Indian properties</li>
                        </ul>
                    </div>
                    """, unsafe_allow_html=True)

        # Revenue Potential
        with st.container():
            st.markdown("### Revenue Potential by Service")

            fig = px.scatter(ancillary_data,
                           x='Profit_Margin',
                           y='Revenue_Per_Guest',
                           size='India_Usage_Percentage',
                           color='Service',
                           color_discrete_sequence=px.colors.qualitative.Plotly,
                           labels={
                               'Revenue_Per_Guest': 'Revenue (‚Çπ)',
                               'Profit_Margin': 'Margin (%)',
                               'Service': 'Service'
                           },
                           template='plotly_white',
                           hover_name='Service',
                           height=500)

            fig.update_layout(
                xaxis_title='Profit Margin (%)',
                yaxis_title='Revenue per Guest (‚Çπ)',
                hovermode='closest'
            )

            # Add quadrant lines
            fig.add_shape(type="line", x0=40, y0=1500, x1=40, y1=3000, line=dict(color="Gray", dash="dot"))
            fig.add_shape(type="line", x0=40, y0=1500, x1=80, y1=1500, line=dict(color="Gray", dash="dot"))

            st.plotly_chart(fig, use_container_width=True)

            if show_insights:
                with st.expander("üìå Revenue Potential Insights"):
                    st.markdown("""
                    <div class="insight-box">
                        <h4>Revenue Opportunity Analysis</h4>
                        <ul>
                            <li><b>Spa outperforms:</b> ‚Çπ2500 revenue at 60% margin - prime upsell candidate</li>
                            <li><b>Restaurant volume:</b> High usage (55%) but moderate margins (35%) - consider premium menu items</li>
                            <li><b>Parking paradox:</b> 80% margins but low revenue - ideal for bundling with rooms</li>
                            <li><b>Mini bar opportunity:</b> 30% usage at 55% margin - needs better placement/marketing</li>
                            <li><b>Action:</b> Create "Premium Wellness Package" combining spa + mini bar</li>
                        </ul>
                    </div>
                    """, unsafe_allow_html=True)

    with col2:
        # Profitability Matrix
        with st.container():
            st.markdown("### Service Profitability Matrix")

            fig = px.scatter(ancillary_data,
                           x='Revenue_Per_Guest',
                           y='Profit_Margin',
                           size='India_Usage_Percentage',
                           color='Service',
                           hover_name='Service',
                           log_x=True,
                           labels={
                               'Revenue_Per_Guest': 'Revenue per Guest (Log Scale)',
                               'Profit_Margin': 'Profit Margin (%)',
                               'India_Usage_Percentage': 'Usage %'
                           },
                           template='plotly_white')

            fig.update_layout(
                hovermode="closest",
                clickmode='event+select',
                height=500
            )

            # Add quadrant lines
            fig.add_shape(type="line", x0=500, y0=40, x1=500, y1=80, line=dict(color="Gray", dash="dot"))
            fig.add_shape(type="line", x0=500, y0=40, x1=2500, y1=40, line=dict(color="Gray", dash="dot"))

            st.plotly_chart(fig, use_container_width=True)

            if show_insights:
                with st.expander("üìå Profitability Insights"):
                    st.markdown("""
                    <div class="insight-box">
                        <h4>Strategic Profitability Analysis</h4>
                        <ul>
                            <li><b>Star Performers (Top-Right):</b> Spa services dominate both revenue and margin</li>
                            <li><b>Hidden Gems (Top-Left):</b> Parking's 80% margin warrants operational focus</li>
                            <li><b>Volume Drivers (Bottom-Right):</b> Restaurant needs efficiency improvements</li>
                            <li><b>Challenge Areas (Bottom-Left):</b> Airport transfers may need outsourcing</li>
                            <li><b>Action:</b> Implement "Spa Hour" promotions during typical usage valleys (2-5PM)</li>
                        </ul>
                    </div>
                    """, unsafe_allow_html=True)

        # Usage vs Revenue Correlation
        with st.container():
            st.markdown("### Usage vs Revenue Correlation")

            fig = px.line(ancillary_data,
                         x='India_Usage_Percentage',
                         y='Revenue_Per_Guest',
                         text='Service',
                         markers=True,
                         labels={
                             'India_Usage_Percentage': 'Usage Percentage (%)',
                             'Revenue_Per_Guest': 'Revenue per Guest (‚Çπ)'
                         },
                         template='plotly_white')

            fig.update_traces(
                textposition="top center",
                line=dict(color='#1a2a6c', width=2),
                marker=dict(size=12, color='#b21f1f')
            )

            st.plotly_chart(fig, use_container_width=True)

            if show_insights:
                with st.expander("üìå Correlation Insights"):
                    st.markdown("""
                    <div class="insight-box">
                        <h4>Usage-Revenue Relationship</h4>
                        <ul>
                            <li><b>Positive correlation:</b> Generally, higher usage drives higher revenue</li>
                            <li><b>Spa exception:</b> Highest revenue despite moderate usage (35%)</li>
                            <li><b>Parking anomaly:</b> High usage (45%) but low revenue - consider price tiering</li>
                            <li><b>Restaurant leverage:</b> Strong usage-revenue relationship suggests pricing power</li>
                            <li><b>Action:</b> Test 10% price increase on restaurant premium items</li>
                        </ul>
                    </div>
                    """, unsafe_allow_html=True)

with tab6:
    st.subheader("Strategic Recommendations")

    # Create three columns for different recommendation categories
    col1, col2, col3 = st.columns(3)

    with col1:
        st.markdown("""
        <div class="kpi-card" style="min-height: 300px;">
            <h3>üí∞ Revenue Optimization</h3>
            <div class="insight-box">
                <ul>
                    <li><b>Dynamic Pricing:</b> Implement AI-driven pricing for peak periods</li>
                    <li><b>Upsell Packages:</b> Bundle high-margin services with room bookings</li>
                    <li><b>Length-of-Stay Pricing:</b> Offer discounts for longer stays during off-peak</li>
                    <li><b>Loyalty Program:</b> Introduce tiered rewards for repeat guests</li>
                    <li><b>Channel Management:</b> Reduce OTA dependence with direct booking incentives</li>
                </ul>
            </div>
        </div>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="kpi-card" style="min-height: 300px; margin-top: 20px;">
            <h3>üìÖ Seasonal Strategies</h3>
            <div class="insight-box">
                <ul>
                    <li><b>Shoulder Season Packages:</b> Create themed packages for transition months</li>
                    <li><b>Event-Based Pricing:</b> Adjust rates for local festivals and conferences</li>
                    <li><b>Staff Training:</b> Cross-train employees for flexible seasonal staffing</li>
                    <li><b>Pre-Book Discounts:</b> Offer 10% off for bookings made 6+ months in advance</li>
                    <li><b>Local Partnerships:</b> Collaborate with attractions for joint promotions</li>
                </ul>
            </div>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown("""
        <div class="kpi-card" style="min-height: 300px;">
            <h3>‚ùå Cancellation Reduction</h3>
            <div class="insight-box">
                <ul>
                    <li><b>Flexible Rate Tiers:</b> Offer non-refundable vs flexible rate options</li>
                    <li><b>Deposit Structure:</b> Implement progressive deposit requirements</li>
                    <li><b>Last-Minute Incentives:</b> SMS discounts for upcoming reservations</li>
                    <li><b>Platform-Specific Policies:</b> Stricter terms for high-cancellation OTAs</li>
                    <li><b>Automated Reminders:</b> Send personalized pre-stay communications</li>
                </ul>
            </div>
        </div>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="kpi-card" style="min-height: 300px; margin-top: 20px;">
            <h3>üõéÔ∏è Service Enhancement</h3>
            <div class="insight-box">
                <ul>
                    <li><b>Spa Revenue:</b> Introduce express treatments for business travelers</li>
                    <li><b>F&B Innovation:</b> Create local cuisine tasting menus with premium pricing</li>
                    <li><b>Digital Concierge:</b> Mobile app for easy service booking</li>
                    <li><b>Personalization:</b> Use guest data to customize service offerings</li>
                    <li><b>Eco-Upgrades:</b> Sustainable options with premium pricing</li>
                </ul>
            </div>
        </div>
        """, unsafe_allow_html=True)

    with col3:
        st.markdown("""
        <div class="kpi-card" style="min-height: 300px;">
            <h3>üìä Data-Driven Actions</h3>
            <div class="insight-box">
                <ul>
                    <li><b>Guest Segmentation:</b> Develop targeted campaigns for each cluster</li>
                    <li><b>Predictive Analytics:</b> Forecast demand for optimal staffing/pricing</li>
                    <li><b>Sentiment Analysis:</b> Monitor reviews for service improvement areas</li>
                    <li><b>Competitive Benchmarking:</b> Regular rate shopper reports</li>
                    <li><b>Lifetime Value Modeling:</b> Focus acquisition on high-value segments</li>
                </ul>
            </div>
        </div>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="kpi-card" style="min-height: 300px; margin-top: 20px;">
            <h3>üìà Quick Wins</h3>
            <div class="insight-box">
                <ul>
                    <li><b>Check-in Upsell:</b> Train front desk on service promotion</li>
                    <li><b>Early Bird Packages:</b> Combine room + breakfast at 5% discount</li>
                    <li><b>Weekday Business:</b> Offer free parking for corporate bookings</li>
                    <li><b>Direct Booking Perks:</b> Free room upgrade for website reservations</li>
                    <li><b>Post-Stay Engagement:</b> Email offers based on previous purchases</li>
                </ul>
            </div>
        </div>
        """, unsafe_allow_html=True)

    # Implementation roadmap
    st.markdown("""
    <div class="graph-card" style="margin-top: 20px;">
        <h3>üõ£Ô∏è Recommended Implementation Roadmap</h3>
        <div style="margin-top: 15px;">
            <table style="width: 100%; border-collapse: collapse;">
                <tr style="background-color: #1a2a6c; color: white;">
                    <th style="padding: 10px; text-align: left; width: 20%;">Phase</th>
                    <th style="padding: 10px; text-align: left; width: 30%;">Actions</th>
                    <th style="padding: 10px; text-align: left; width: 20%;">Timeline</th>
                    <th style="padding: 10px; text-align: left; width: 30%;">Expected Impact</th>
                </tr>
                <tr style="border-bottom: 1px solid #ddd;">
                    <td style="padding: 10px;"><b>Immediate (0-1 month)</b></td>
                    <td style="padding: 10px;">Quick wins implementation, Cancellation policy review</td>
                    <td style="padding: 10px;">Month 1</td>
                    <td style="padding: 10px;">2-5% revenue lift, reduced cancellations</td>
                </tr>
                <tr style="border-bottom: 1px solid #ddd;">
                    <td style="padding: 10px;"><b>Short-Term (1-3 months)</b></td>
                    <td style="padding: 10px;">Dynamic pricing rollout, Service bundling</td>
                    <td style="padding: 10px;">Months 2-3</td>
                    <td style="padding: 10px;">5-8% revenue increase, higher ancillary sales</td>
                </tr>
                <tr style="border-bottom: 1px solid #ddd;">
                    <td style="padding: 10px;"><b>Medium-Term (3-6 months)</b></td>
                    <td style="padding: 10px;">Loyalty program launch, Staff training</td>
                    <td style="padding: 10px;">Months 4-6</td>
                    <td style="padding: 10px;">Improved guest satisfaction, repeat business</td>
                </tr>
                <tr>
                    <td style="padding: 10px;"><b>Long-Term (6-12 months)</b></td>
                    <td style="padding: 10px;">Full tech integration, Predictive analytics</td>
                    <td style="padding: 10px;">Months 7-12</td>
                    <td style="padding: 10px;">10-15% sustained revenue growth</td>
                </tr>
            </table>
        </div>
    </div>
    """, unsafe_allow_html=True)

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #6c757d; font-size: 14px;">
    <p>¬© 2023 Hotel Intelligence Dashboard | Powered by Streamlit</p>
</div>
""", unsafe_allow_html=True)
